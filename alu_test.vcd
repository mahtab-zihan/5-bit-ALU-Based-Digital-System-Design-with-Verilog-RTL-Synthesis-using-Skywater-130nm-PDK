$date
	Fri Jun 13 20:59:27 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU_tb $end
$var wire 1 ! CF $end
$var wire 1 " ZF $end
$var wire 1 # SF $end
$var wire 5 $ R [4:0] $end
$var reg 5 % A [4:0] $end
$var reg 5 & B [4:0] $end
$var reg 1 ' OP $end
$scope module uut $end
$var wire 5 ( A [4:0] $end
$var wire 5 ) B [4:0] $end
$var wire 1 ! CF $end
$var wire 1 ' OP $end
$var wire 1 " ZF $end
$var wire 1 # SF $end
$var wire 5 * R_ROL [4:0] $end
$var wire 5 + R_NOT [4:0] $end
$var reg 5 , result [4:0] $end
$scope module NOT1 $end
$var wire 5 - A [4:0] $end
$var wire 5 . result [4:0] $end
$upscope $end
$scope module ROL1 $end
$var wire 5 / in [4:0] $end
$var wire 3 0 shift [2:0] $end
$var reg 5 1 out [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module top_tb $end
$var wire 1 2 flag_gt_zero $end
$var wire 5 3 result [4:0] $end
$var wire 1 4 done $end
$var reg 1 5 clk $end
$var reg 1 6 reset $end
$scope module uut $end
$var wire 1 5 clk $end
$var wire 1 2 flag_gt_zero $end
$var wire 1 6 reset $end
$var wire 5 7 result [4:0] $end
$var wire 1 4 done $end
$var wire 1 8 ZF $end
$var wire 1 9 SF $end
$var wire 5 : R_result [4:0] $end
$var wire 1 ; OP $end
$var wire 5 < B [4:0] $end
$var wire 5 = A [4:0] $end
$scope module controller1 $end
$var wire 1 5 clk $end
$var wire 1 6 reset $end
$var parameter 3 > FINISH $end
$var parameter 3 ? ONE $end
$var parameter 3 @ START $end
$var parameter 3 A THREE $end
$var parameter 3 B TWO $end
$var reg 5 C A [4:0] $end
$var reg 5 D B [4:0] $end
$var reg 1 ; OP $end
$var reg 1 4 done $end
$var reg 1 E flag $end
$var reg 3 F nstate [2:0] $end
$var reg 3 G pstate [2:0] $end
$var reg 5 H result [4:0] $end
$upscope $end
$scope module datapath1 $end
$var wire 5 I A [4:0] $end
$var wire 5 J B [4:0] $end
$var wire 1 K CF $end
$var wire 1 ; OP $end
$var wire 1 8 ZF $end
$var wire 1 9 SF $end
$var wire 5 L R_ROL [4:0] $end
$var wire 5 M R_NOT [4:0] $end
$var reg 5 N result [4:0] $end
$scope module NOT1 $end
$var wire 5 O A [4:0] $end
$var wire 5 P result [4:0] $end
$upscope $end
$scope module ROL1 $end
$var wire 5 Q in [4:0] $end
$var wire 3 R shift [2:0] $end
$var reg 5 S out [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 B
b11 A
b0 @
b1 ?
b100 >
$end
#0
$dumpvars
b0 S
b0 R
b0 Q
b11111 P
b0 O
b11111 N
b11111 M
b0 L
0K
b0 J
b0 I
bx H
b0 G
b1 F
0E
b0 D
b0 C
b0 =
b0 <
0;
b11111 :
19
08
bx 7
16
05
04
bx 3
x2
b101 1
b0 0
b101 /
b11010 .
b101 -
b11010 ,
b11010 +
b101 *
b0 )
b101 (
0'
b0 &
b101 %
b11010 $
1#
0"
0!
$end
#5000
15
#10000
0#
b1 $
b1 ,
b1 0
b1111 +
b1111 .
b1 *
b1 1
05
06
1'
b1 &
b1 )
b10000 %
b10000 (
b10000 -
b10000 /
#15000
b11010 :
b11010 N
b11010 M
b11010 P
b101 L
b101 S
b10 F
b101 =
b101 C
b101 I
b101 O
b101 Q
b1 G
15
#20000
1#
b10101 $
b10101 ,
b11 0
b1001 +
b1001 .
b10101 *
b10101 1
05
b11 &
b11 )
b10110 %
b10110 (
b10110 -
b10110 /
#25000
02
09
b1 :
b1 N
b1 R
b1111 M
b1111 P
b1 L
b1 S
b11 F
1;
b1 <
b1 D
b1 J
b10000 =
b10000 C
b10000 I
b10000 O
b10000 Q
b10 G
15
#30000
b11111 $
b11111 ,
b0 0
b11111 +
b11111 .
b0 *
b0 1
05
0'
b0 &
b0 )
b0 %
b0 (
b0 -
b0 /
#35000
x2
19
b11111 :
b11111 N
b0 R
b11111 M
b11111 P
b0 L
b0 S
b100 F
0;
b0 <
b0 D
b0 J
b0 =
b0 C
b0 I
b0 O
b0 Q
b11 G
15
#40000
1"
0#
b0 $
b0 ,
b0 +
b0 .
b11111 *
b11111 1
05
b11111 %
b11111 (
b11111 -
b11111 /
#45000
14
b100 G
15
#50000
05
